// const videoData = await cloudinary.v2.uploader.upload(video._writeStream.path, {
            //   resource_type: 'video',
            //   upload_preset: "courses_upload",
            //   folder: `${courseTitle}/lesson_${i}/videos`,
            // })
            // lessonObj.videos.push({
            //   name: video.originalFilename.slice(0, -4),
            //   url: videoData.secure_url,
            //   publicId: videoData.public_id,
            // })

            import { useState } from "react";
import styled from "styled-components";

const Container = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
`;

const InfoContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
`;

const Title = styled.h2`
  font-size: 2rem;
  margin-bottom: 1rem;
`;

const Desc = styled.p`
  font-size: 1rem;
  margin-bottom: 1rem;
  text-align: justify;
`;

const Button = styled.button`
  background-color: #0070f3;
  color: #fff;
  border: none;
  border-radius: 4px;
  font-size: 1rem;
  padding: 0.5rem 1rem;
  cursor: pointer;
`;

const Intro = () => {
  const [showFullDesc, setShowFullDesc] = useState(false);

  const descWords = "To fill the need of individuals seeking in-demand crypto and blockchain skills to improve their standard of living and attaining financial freedom by providing excellent hands-on training for a wider variety of students by offering alternate solutions to conventional schooling utilizing current internet technologies and proven teaching practices implemented by a team of professionals in blockchain, e-commerce, forex, cryptocurrency, social media marketing and motion/graphics industries."
    .split(" ");
  const truncatedDesc = descWords.slice(0, 40).join(" ");
  const fullDesc = descWords.join(" ");

  const toggleDesc = () => {
    setShowFullDesc(!showFullDesc);
  };

  return (
    <Container>
      <Title>Why Bitkova</Title>
      <InfoContainer>
        {showFullDesc ? (
          <Desc>{fullDesc}</Desc>
        ) : (
          <Desc>{truncatedDesc}... </Desc>
        )}
        <Button onClick={toggleDesc}>
          {showFullDesc ? "See less" : "See more"}
        </Button>
      </InfoContainer>
    </Container>
  );
};

export default Intro;

// textx truncation

const [isTruncated, setIsTruncated] = useState(true)

const desc = 'To fill the need of individuals seeking in-demand crypto and blcockchain skills to improve their standard of living and attaining financial freedom by providing excellent hands-on training for a wider variety of students by offering alternate solutions to conventional schooling utilizing current internet technologies and proven teaching practices implemented by a team of professionals in blcockchain, e-commerce, forex, cryptocurrency, social media marketing and motion/graphics industries.'
  

  const handleToggle = () => {
    setIsTruncated(!isTruncated)
  }

  {/* <Desc>To fill the need of individuals seeking in-demand crypto and blcockchain skills to improve their standard of living and attaining financial freedom by providing excellent hands-on training for a wider variety of students by offering alternate solutions to conventional schooling utilizing current internet technologies and proven teaching practices implemented by a team of professionals in blcockchain, e-commerce, forex, cryptocurrency, social media marketing and motion/graphics industries.
        
        </Desc> */}
        {/* <Desc>
          {isTruncated
            ? `${desc.split(' ').slice(0, 40).join(' ')}...`
            : desc}
          {isTruncated && (
            <Seemore onClick={handleToggle}>See more</Seemore>
          )}
          {!isTruncated && (
          <span><Seemore onClick={handleToggle}>See less</Seemore></span>
          )}
        </Desc> */}



  // fetch the user's purchased courses list on load
  // useEffect(() => {
  //   const fetchPurchasedCourses = async () => {
  //     try {
  //       const response = await fetch(`/api/courses/${student}`)
  //       if (response.ok) {
  //         const data = await response.json()
  //         setPurchasedCourses(data)
  //       } else {
  //         setError("Could not fetch purchased courses")
  //       }
  //     } catch (error) {
  //       setError("Could not fetch purchased courses")
  //       console.error(error)
  //     }
  //   }

  //   fetchPurchasedCourses()
  // }, [])



  import { useState } from 'react';
import styled from 'styled-components';

const PlayerContainer = styled.div`
  position: relative;
  width: 100%;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
`;

const Iframe = styled.iframe`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
`;

const VideoPlayer = ({ href, title, videos, currentIndex, setCurrentIndex }) => {
  const [showNextPrev, setShowNextPrev] = useState(false);

  const showNextVideo = () => {
    if (currentIndex + 1 < videos.length) {
      setCurrentIndex(currentIndex + 1);
    }
  };

  const showPrevVideo = () => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
    }
  };

  return (
    <div onMouseEnter={() => setShowNextPrev(true)} onMouseLeave={() => setShowNextPrev(false)}>
      <PlayerContainer>
        <Iframe
          width="100%"
          height="100%"
          src={href}
          title={title}
          frameBorder="0"
          allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
        />
      </PlayerContainer>
      {showNextPrev && (
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginTop: 8 }}>
          {currentIndex > 0 && (
            <button onClick={showPrevVideo} style={{ marginRight: 16 }}>
              <svg width="24" height="24" viewBox="0 0 24 24">
                <path fill="#333" d="M15,5.5V18.5L6,12z" />
              </svg>
            </button>
          )}
          {currentIndex + 1 < videos.length && (
            <button onClick={showNextVideo}>
              <svg width="24" height="24" viewBox="0 0 24 24">
                <path fill="#333" d="M9,5.5v13L18,12z" />
              </svg>
            </button>
          )}
        </div>
      )}
    </div>
  );
};
